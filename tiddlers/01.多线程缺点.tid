created: 20220531070009555
creator: TidGiUser
difficulty: 6.1000000000000005
due: 20220611004036296
grade: 0
history: [{"due":"20220610080801975","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220608080801975"}]
interval: 2
lapses: 1
modified: 20220610004036296
modifier: TidGiUser
reps: 1
retrievability: 0.9
review: 20220610004036296
stability: 1.4816364413634358
tags: 多线程基础知识 $:/tags/Commander/Working fx ?
title: 01.多线程缺点
tmap.id: 526cfe3c-e334-4f2a-b635-d408e18fcd1e
type: text/vnd.tiddlywiki



# 安全性问题[ext[https://cloud.tencent.com/developer/article/1751728]]
## 定义：当多个线程并发访问某个 Java 对象(Object)时，不管系统如何调度这些线程，也不管这些线程将如何交替操作，这个 Object 都能表现出一致的、正确的行为，那么对 这个 Object 的操作是线程安全的。如果这个 Object 表现出不一致的、错误的行为，那么对这个 Object 的操作不是线程安全的，发生了线程的安全问题。''一般会分为程序的线程安全和类的线程安全''
### 程序的线程安全：尤其是多线程执行访问 共享 和 可变状态 的代码时，能够正确的执行。[img[截屏2022-05-31 15.08.10.png]]

### ''类的线程安全：“多个线程访问同一个类，这个类始终都能表现出正确的行为”，对这个类的任何操作都不会违背不变性条件或后验条件？？''
## 导致线程不安全的根源与具体表现的问题（三大性质）：
### 多线程分时复用cpu，线程切换，导致一个逻辑上整体的操作可以被中途打断（原子性)(''实际的原子性往往是一个相对的概念，一段原子性的代码并不意味着不会被cpu打断了，一般表现为：访问同一个状态的A，B线程，A线程必须在B线程完成了某段原子性操作之后才能继续执行，B相对于A是原子的。'')

### cpu缓存，均衡cpu与内存的速度差异（可见性）
### 编译器指令序列优化，使得缓存能够得到更加合理地利用（有序性）

# 活跃性问题：死锁
# 性能问题：上下文切换的损耗
