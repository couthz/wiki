created: 20220609085621829
creator: TidGiUser
difficulty: 5
due: 20220611085658235
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220612074327880
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220609085658235
stability: 2
tags: netty fx ?
title: 30.netty:Decoder
type: text/vnd.tiddlywiki

! 简介
Netty从底层Java通道读到ByteBuf二进制数据，传入Netty通道的流水线，随后开始入站处理。

在入站处理过程中，需要将ByteBuf二进制类型，解码成Java POJO对象。这个解 码过程，可以通过Netty的Decoder(解码器)去完成。

在出站处理过程中，业务处理后的结果(出站数据)，需要从某个Java POJO对象，编 码为最终的ByteBuf二进制数据，然后通过底层Java通道发送到对端。在编码过程中，需要用到Netty的Encoder(编码器)去完成数据的编码工作。

! 基础抽象类：ByteToMessageDecoder：字节转POJO
什么是Netty的解码器呢?:

Netty中的解码器，都是Inbound入站处理器类型，几乎都直接或者间接地实现了入站处理的超级接口ChannelInboundHandler。

解码器负责处理“入站数据”。 它能将上一站Inbound入站处理器传过来的输入(Input)数据，进行数据的解码或者格式转换，然后发送到下一站Inbound入站处理器。 

Netty内置了这个解码器，叫做ByteToMessageDecoder。

ByteToMessageDecoder将上一站传过来的输入到Bytebuf中的数据进行解码,解码出一个List对象列表;

然后，迭代List列表，逐个将Java POJO对象传入下一站Inbound入站处理器。

当然ByteToMessageDecoder是抽象类，只是以[[模版方法模式]]实现了上述流程，decode()还是要由子类实现。

[img[截屏2022-06-10 10.10.36.png]]

测试：

>单元测试专用的channel：EmbeddedChannel
> [img[截屏2022-06-10 10.39.59.png]]

<<<
引用计数的问题?????

最后说明一下:ByteToMessageDecoder传递给下一站的是解码之后的Java POJO对象， 不是ByteBuf缓冲区。问题来了，ByteBuf缓冲区并没有发送到流水线的TailContext尾部处理 器，将由谁负责释放引用计数呢?其实，基类ByteToMessageDecoder会完成ByteBuf释放工 作，它会调用ReferenceCountUtil.release(in)方法，将之前的ByteBuf缓冲区的引用数减1。

也有同学会问:这个ByteBuf被释放了，但是，如果在后面还需要用到，怎么办呢?可 以在子类的decode方法中调用一次ReferenceCountUtil.retain(in)来增加一次引用计数，不过 在使用完成后，要将及时地将自己增加的这次计数减去。
<<<

这个测试的套路可以反复使用：

```java
//decoder
public class Byte2IntegerDecoder extends ByteToMessageDecoder {
    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf in, List<Object> out) throws Exception {

        while (in.readableBytes() >= 4) {
            int i = in.readInt();

            log.info("解码出一个整数"+i);
            out.add(i);
        }
    }
}

//再接一个入站处理器
public class IntegerProcessHandler extends ChannelInboundHandlerAdapter {

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        Integer integer = (Integer) msg;
        log.info("打印出一个整数" + integer);
    }
}

//测试
public class Byte2IntegerDecoderTester {

    @Test
    public void testByteToIntegerDecoder() {
        ChannelInitializer<EmbeddedChannel> i = new ChannelInitializer<EmbeddedChannel>() {

            protected void initChannel(EmbeddedChannel ch) throws Exception {
                ch.pipeline().addLast(new Byte2IntegerDecoder());
                ch.pipeline().addLast(new IntegerProcessHandler());
            }
        };

        //EmbeddedChannel并不需要注册到eventLoop上,主线程同步地操作它就行
        EmbeddedChannel channel = new EmbeddedChannel(i);
        for (int j = 0; j < 100; j++) {
            ByteBuf buf = Unpooled.buffer();
            buf.writeInt(j); //直接在用户空间模拟一个buf,而不是从内核复制过来数据
            channel.writeInbound(buf);
        }
    }
}
```

! ReplayingDecoder

ReplayingDecoder关键词：反复，分阶段

Byte2IntegerDecoder可以用一个更简单的ReplayingDecoder代替
ReplayingDecoder类是ByteToMessageDecoder的子类。其作用是:

⚫~~ ''反复''~~按照decode的逻辑读取ByteBuf缓冲区(并不带while循环,对比ByteToMessageDecoder，仅仅是把if判断去掉,在调用readInt等方法前会判断长度)

⚫ 在读取的数据之前，需要检查缓冲区是否有足够的字节。若ByteBuf中有足够的字节，则会正常读取;反之，如果没有足够的字节，则会停止解码。

!! 最简单的整数解码器
通过这个示例程序，我们可以看到:继承ReplayingDecoder实现一个解码器，就不用编 写长度判断的代码。''ReplayingDecoder进行长度判断的原理，其实很简单:它的内部定义了 一个新的二进制缓冲区类，对ByteBuf缓冲区进行了装饰，这个类名为 ReplayingDecoderBuffer。该装饰器的特点是:在缓冲区真正读数据之前，首先进行长度的 判断:如果长度合格，则读取数据;否则，抛出ReplayError。''ReplayingDecoder捕获到 ReplayError后，会留着数据，等待下一次IO事件到来时再读取。

> 其实就是不用写if判断长度了，''看起来适合固定长度分包的场景，比如数据都是整数''
> 然而实际上上面这个想法不完全正确，加入了state属性其实可以提升一定的灵活性
```java
public class Byte2IntegerReplayDecoder extends ReplayingDecoder {
       @Override
       public void decode(ChannelHandlerContext ctx,
                                    ByteBuf in, List<Object> out) {
																		int i = in.readInt(); 
																		Logger.info("解码出一个整数: " + i); 
																		out.add(i);
} }

```
实质上，ReplayingDecoder的作用远远不止于进行长度判断，它更重要的作用是用于分包传输的应用场景：

!! 整数相加解码器：分阶段解码

state属性，提升了一定的灵活性，例如这个将数字两两一组相加的案例，''相当于ReplayDecoder每两次处理完一组数组''

```java
//state类型在泛型中
public class IntegerAddDecoder extends ReplayingDecoder<IntegerAddDecoder.PHASE> {

    //分为两个阶段
    enum PHASE {
        PHASE_1,
        PHASE_2
    }
    private int first;
    private int second;

    public IntegerAddDecoder() {
        //初始化为第一阶段
        super(PHASE.PHASE_1);
    }

    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf in, List<Object> out) throws Exception {
        switch (state()) {
            case PHASE_1:

                first = in.readInt();
//checkPoint除了变更state,还可以保存当前bytebuf的读指针
//其实如果用getInt,也就不会移动读指针,并且读指针的位置会保留到下次解码
                checkpoint(PHASE.PHASE_2);
                break;

            case PHASE_2:
                second = in.readInt();
                Integer sum = first + second;
                out.add(sum);

                checkpoint(PHASE.PHASE_1);
                break;
            default:
                break;
        }
    }
}
```
>''这里的decoder就是有状态的，也就不适合给多个channel共享了''

!! 字符串分包解码器
在原理上，字符串分包解码和整数分包解码是一样的。''有所不同的是:整数的长度是固定的，目前在Java中是4个字节;而字符串的长度不是固定的，是可变长度的。''

解决办法：

''1.约定协议，请求头长度固定，请求体长度写在头部中''(联想：[[redis数据结构]])

2.分隔符

>对比一下msb课上写的分包解码器，其实基于ReplayingDecoder的分阶段解码，挺适合进行这种协议处理：1. 省去了循环和长度判断  2.每次循环走不同的分支。

```java
public class StringReplyDecoder extends ReplayingDecoder<StringReplyDecoder.PHASE> {

    //分为两个阶段
    enum PHASE {
        PHASE_1,
        PHASE_2
    }
    private int length;

    public StringReplyDecoder() {
        //初始化为第一阶段
        super(PHASE.PHASE_1);
    }

    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf in, List<Object> out) throws Exception {
        switch (state()) {
            //第一阶段读取长度
            case PHASE_1:
                length = in.readInt(); //直接读长度
                checkpoint(PHASE.PHASE_2);
                break;

            case PHASE_2:
                byte[] inbytes = new byte[length];
                in.readBytes(inbytes, 0, length); //按长度读数据
                out.add(new String(inbytes, "UTF-8"));
                checkpoint(PHASE.PHASE_1);
                break;
            default:
                break;
        }
    }
}

```

! MessageToMessageDecoder：POJO转POJO

```java
 
 //泛型中指定入站类型，实现int转string的编码器
 public class Integer2StringDecoder extends
                           MessageToMessageDecoder<Integer> {
       @Override
       public void decode(ChannelHandlerContext ctx, Integer msg,
                       List<Object> out)...{
           out.add(String.valueOf(msg));
} }

```

! 常用内置解码器

> 注意：这几种解码的结果并不是string,而是bytebuf

!! 固定长度数据包解码器——FixedLengthFrameDecoder
适用场景:每个接收到的数据包的长度，都是固定的，例如100个字节。

!! 行分割数据包解码器——LineBasedFrameDecoder
适用场景:每个ByteBuf数据包，使用换行符(或者回车换行符)作为数据包的边界分 割符。在这种场景下，只需要把这个LineBasedFrameDecoder解码器加到流水线中，Netty会使用换行分隔符，把ByteBuf数据包分割成一个一个完整的应用层ByteBuf数据包，再发送到下一站。

> LineBasedFrameDecoder支持配置一个最大长度值，表示解码出来的ByteBuf最大能包 含的字节数。如果连续读取到最大长度后，仍然没有发现换行符，就会抛出异常

!! 自定义分隔符数据包解码器——DelimiterBasedFrameDecoder
DelimiterBasedFrameDecoder是LineBasedFrameDecoder按照行分割的通用版本。不同之处在于，这个解码器更加灵活，可以自定义分隔符，而不是局限于换行符。如果使用这个 解码器，那么所接收到的数据包，末尾必须带上对应的分隔符。

构造方法如下：

```
其构造方法如下:
public DelimiterBasedFrameDecoder(
int maxFrameLength, //解码的数据包的最大长度
Boolean stripDelimiter, //解码后的数据包是否去掉分隔符，一般选择是 ByteBuf delimiter) //分隔符
{
//... 省略构造器的源代码
}
```

!! 自定义长度数据包解码器——LengthFieldBasedFrameDecoder - 专为协议定制
这是一种基于灵活长度的解码器。在ByteBuf数据包中，加了一个长度域字段，保存了 原始数据包的长度。解码的时候，会按照这个长度进行原始数据包的提取。此解码器在所 有开箱即用解码器中是最为复杂的一种，后面会重点介绍。

> 普通的基于Header-Content协议的内容传输，尽量用内置的 LengthFieldBasedFrameDecoder来解码。''感觉就是为这种情况定制的''

```java
public LengthFieldBasedFrameDecoder(
  
 {
int maxFrameLength, //发送的数据包最大长度
int lengthFieldOffset,  //长度字段偏移量
int lengthFieldLength, //长度字段自己占用的字节数
int lengthAdjustment, //长度字段的偏移量矫正,其实就是长度字段的尾部和内容头部之间夹了多少字节
int initialBytesToStrip) //丢弃的起始字节数
}
```

