created: 20220526083156960
creator: TidGiUser
difficulty: 6.1000000000000005
due: 20220611004013855
grade: 0
history: [{"due":"20220610080737106","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220608080737106"}]
interval: 2
lapses: 1
modified: 20220610004013855
modifier: TidGiUser
reps: 1
retrievability: 0.9
review: 20220610004013854
stability: 1.4816364413634358
tags: 多线程基础知识 $:/tags/Commander/Working fx ?
title: 30.线程状态,Thread类常用方法
tmap.id: e065a1e3-b73e-499a-ba36-d048b1089030
type: text/vnd.tiddlywiki

! 线程状态（getState）（结合Thread类常用方法）

!! 6种基本状态

# NEW ： 线程刚刚创建，还没有启动
# RUNNABLE ： 可运行状态，由线程调度器可以安排执行
# * 包括READY和RUNNING两种细分状态
# WAITING： 等待被唤醒
# TIMED WAITING： 隔一段时间后自动唤醒
# BLOCKED： 被阻塞，正在等待锁  (''CAS的锁不会进入BLOCKED'')
# TERMINATED： 线程结束

[img[截屏2022-05-26 16.35.04.png]]

!! 停止线程的方案

# 三个方法

[img[截屏2022-05-26 16.35.25.png]]

# 中断异常的处理：''wait sleep join能响应，锁基本不能响应''

注意：响应了，抛出中断异常之后，标记位会被清除。

停止线程的方案，

1.interrupt

# 被停止方，也就是线程执行方最了解自己什么情况下可以停止线程，在停止线程之前应该做哪些工作以确保数据的完整性。。因此停止线程的工作应当是请求方，被停止方，被调用方三方配合的工作
## 请求方应当用interrupt通知，而不是用stop
## 被停止方应该注意在代码的适当地方响应interrupt，确保自己在适当的位置能够被停止
## 中断异常的处理：被调用的子方法，应当抛出中断异常（''让调用方决定异常处理逻辑''），或者恢复中断异常（''catch中重新调用interrupt方法''）


2.volatile


[img[截屏2022-05-26 16.36.05.png]]

为什么不建议stop：

stop太粗暴，会直接释放所有锁，操作的原子性会被直接破坏，很容易造成数据不一致的问题。

为什么不建议suspend resume：

suspend不释放锁，容易死锁

!! 使用jstack工具查看线程状态（jvm？？？）

有时，服务器 CPU 占用率会一直很高，甚至一直处于 100%。如果 CPU 使用率居高不下， 自然是有某些线程一直占用着 CPU 资源，那又如何查看占用 CPU 较高的线程?或者说，如何查 看到线程的状态呢?一种比较快捷的办法是 Jstack 工具。

[img[截屏2022-05-26 16.36.37.png]]

! 线程基本操作

!! 命名，用于回溯异常

!! Thread.sleep(time)操作

# Thread.sleep(time)进入timed\_waiting状态，让出cpu
# 调用了sleep的线程能够响应中断异常，一般如果是被调用方（给别人写模块），应该把中断异常再向外抛出，因为我们不清楚调用方的异常处理逻辑

!! thread.interrupt()方法

并不是终止线程，而是设置目标线程的中断标识位，相当于通知其终止，因为只有目标线程自己清楚该怎么停止线程，停止之前需要做怎样的处理

# 如果是running状态的线程，可以调用isInterrupted判断自己是否被中断
# Object.wait() Thread.sleep(time) Thread.join()能响应，锁基本不能响应中断异常，换句话说time_waited和waiting状态能响应interrupt方法，并且会退出阻塞，并且会重置中断标志位

!! thread.join或thread.join(time)

场景：thread1对thread2执行有依赖，需要thread2先执行完（或者超时之后），自己再执行

使用 join 方法的优势是比较简单，劣势是 join 方法没有办法直接取得乙方线程的执行结果。

注意：调用thread2.join(time)，并不能保证thread1在time时间后一定变为runnable
[img[截屏2022-05-26 16.38.21.png]]
!! Thread.yield()

作用：是让目前正在执行的线程放弃当前的执行，让出 CPU 的 执行权限，使得 CPU 去执行其他的线程。处于让步状态的 JVM 层面的线程状态，仍然是 RUNNABLE 可执行状态;''但是，该线程所对应的操作系统层面的线程，在状态上来说，会从执 行状态变成就绪状态。''

线程在 yield 时，线程放弃和重占 CPU 的时间是不确定的，可能是刚刚放 弃 CPU，马上又获得 CPU 执行权限，重新开始执行。

//''//注意：yield 不能保证使得当前正在运行的线程迅速转换到就绪状态。//''//

!! 守护线程 thread.setDaemon

//''//用户线程和 JVM 进程是主动关系— —如果全部的用户线程终止，JVM 虚拟机进程也随之终止;//''//

//''//守护线程和 JVM 进程是被动关系— —如果 JVM 进程终止，所有的守护线程也随之终止。//''//

换个角度来理解，守护线程提供服务，是守护者。用户线程享受服务，是被守护者。只有全 部的用户线程终止了，相当于没有了被守护者，守护线程也就没有工作可做了，也可全部终止了

要点：

(1)守护线程必须在启动前，将其守护状态设置为 true;启动之后，不能再将用户线程设置 为守护线程。否则，JVM 会抛出一个 InterruptedException 异常。具体来说，如果线程为守护线程，必须在线程实例的 start()方法调用之前，调用线程实例的 setDaemon(true)，设置其 daemon 实例属性值为 true。
(2)//''//守护线程存在被 JVM 强行终止的风险//''//，所以，在守护线程中//''//尽量不去访问系统资源//''//， 如文件句柄、数据库连接等等。守护线程被强行终止时，可能会引发系统资源操作的不负责任的 中断，从而导致资源不可逆的损坏。
(3)守护线程创建的线程，也是守护线程。在守护线程中创建的线程，新的线程都是守护线程。在创建之后，如果通过调用 setDaemon(false)将新的线程显示的设置为用户线程，新的线程可以调整成为用户线程。

!! wait notiy park unpark???
//