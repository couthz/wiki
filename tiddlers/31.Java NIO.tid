created: 20220606065853855
creator: TidGiUser
difficulty: 5.1000000000000005
due: 20220616014250933
grade: 1
history: [{"due":"20220610080855727","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220608080855727"}]
interval: 2
lapses: 0
modified: 20220610014250933
modifier: TidGiUser
reps: 2
retrievability: 0.9
review: 20220610014250932
stability: 5.512139752431654
tags: IO fx ?
title: 31.Java NIO
type: text/vnd.tiddlywiki

! NIO核心组件

在1.4版本之前，Java IO类库是阻塞式IO;从1.4版本开始，引进了新的异步IO库，被称为Java New IO类库，简称为Java NIO。

Java NIO类库的目标，就是要让Java支持非阻塞IO，基于这个原因，更多的人喜欢称 Java NIO为非阻塞IO(Non-Block IO)，称“老的”阻塞式Java IO为[[OIO|30.Java BIO]](Old IO)。

总体上说，NIO弥补了原来[[面向流|面向流和面向缓冲区]]的OIO同步阻塞的不足，它为标准Java代码提供了高速的、[[面向缓冲区|面向流和面向缓冲区]]的IO。

如果理解了第2章的四种IO模型，大家一眼就能识别出来，''Java NIO，属于第三种模型
—— [[IO 多路复用模型|20.五种IO模型]]。只不过，Java NIO组件提供了统一的应用开发API，为大家屏蔽了底层的操作系统的差异。''

! NIO和OIO对比
{{面向流和面向缓冲区}}

2. OIO的操作是阻塞的，而NIO的操作是非阻塞的。
OIO的操作是阻塞的，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。例如，我们调用一个read方法读取一个文件的内容，那么调用read的线程会被阻塞住，直到read操作完成。

NIO如何做到非阻塞的呢?当我们调用read方法时，系统底层已经把数据准备好了，应用程序只需要从通道把数据复制到Buffer(缓冲区)就行;如果没有数据，当前线程可以去干别的事情，不需要进行阻塞等待。

>NIO有多通道的概念。非阻塞指的是当某个通道没有数据时，该线程不会一直阻塞在那边，它还可以去搬运别的通道的数据。传统BIO是面向流的，不存在什么多通道概念，流没数据它自然会一直阻塞在那里

3. OIO没有选择器(Selector)概念，而NIO有选择器的概念。 

NIO技术的实现，是基于底层的IO多路复用技术实现的，比如在Windows中需要select
多路复用组件的支持，在Linux系统中需要select/poll/epoll多路复用组件的支持。所以NIO 的需要底层操作系统提供支持。而OIO不需要用到选择器。

! 核心组件
Java NIO类库包含以下三个核心组件:

⚫ Channel(通道)

⚫ Buffer(缓冲区)

⚫ Selector(选择器) 

!! channel 通道
Channel的角色和OIO中的Stream(流)是 差不多的。在OIO中，同一个网络连接会关联到两个流:一个输入流(Input Stream)，另一个输出流(Output Stream)，Java应用程序通过这两个流，不断地进行输入和输出的操作。''需要注意JAVA针对流的IO操作都是阻塞的''

> ''按道理来说,阻塞不阻塞也是因为操作系统内核的发展''

在NIO中，''一个网络连接使用一个通道表示，所有的NIO的IO操作都是通过连接通道完成的。一个通道类似于OIO中的两个流的结合体''，既可以从通道读取数据，也可以向通道写入数据。''无论读写，通道只能和buffer交互''

> Java NIO的面向缓冲区的处理方法：数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。''但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。''

NIO中的Channel的主要实现有:

1. FileChannel 用于文件IO操作 

2.DatagramChannel 用于UDP的IO操作 

3.SocketChannel 用于TCP的传输操作

4.ServerSocketChannel 用于TCP连接监听操作

!! 选择器(Selector)
''IO多路复用指的是一个进程/线程可以同时监视多个文件描述符(含socket连接)，一旦其中的一个或者多个文件描述符可读或者可写，该监听进程/线程能够进行IO事件的查询。''

对应的Java NIO组件——Selector 选择器。Selector 选择器可以理解为一个IO事件''的监听与查询器''。''通过选择器，一个线程可以查询多个通道的IO事件的就绪状态。''

从编程实现维度来说：

IO多路复用编程的第一步，是把通道注册到选择器中，监听IO事件

第二步 则是通过选择器所提供的事件查询(select)方法，这些注册的通道是否有已经就绪的IO事 件(例如可读、可写、网络连接完成等)。

> 编程实现的角度看select和epoll几乎是没什么区别的，只是内核实现上有了区别

''监听IO事件：表示通道某种IO操作已经就绪、或者说已经做好了准备''
Java NIO将NIO事件进行了简化，只定义了四个事件，这四种事件用SelectionKey的四个常量来表示:

⚫ SelectionKey.OP_CONNECT（客户端连到了服务器）

⚫ SelectionKey.OP_ACCEPT 

⚫ SelectionKey.OP_READ

⚫ SelectionKey.OP_WRITE

这个是用在[[多路复用流程|20.五种IO模型]]的选择器注册server.register(selector, SelectionKey.OP_ACCEpt)，表示内核会监听socket上的哪个事件，发生事件时才会触发回调（事件驱动？？[[异步回调|异步回调模式]]代替主动调用）

!! 缓冲区(Buffer)
''所谓通道的读取，就是将数据从通道读取到缓冲区中;所谓通道的写入，就是将数据 从缓冲区中写入到通道中。缓冲区的使用，是面向流进行读写操作的OIO所没有的，也是 NIO非阻塞的重要前提和基础之一''








