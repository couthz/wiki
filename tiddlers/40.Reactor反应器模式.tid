created: 20220607025243132
creator: TidGiUser
difficulty: 6.1000000000000005
due: 20220611014153820
grade: 0
history: [{"due":"20220610080905860","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220608080905860"}]
interval: 2
lapses: 1
modified: 20220610014153820
modifier: TidGiUser
reps: 1
retrievability: 0.9
review: 20220610014153820
stability: 1.4816364413634358
tags: IO fx ?
title: 40.Reactor反应器模式
type: text/vnd.tiddlywiki

! 参考资料
https://www.notion.so/1-d9a3ebd9a3a84630bca52405e6de9962

! 定义
反应器模式由Reactor反应器线程、Handlers处理器两大角色组成，两大角色的职责分别如下:

(1)Reactor反应器线程的职责:负责响应IO事
件，并且分发到Handlers处理器。 

(2)Handlers处理器的职责:非阻塞的执行业务处理逻辑。

>这里我猜测，也就是将IO模型中的等待数据和复制数据两步骤拆分开了

为了之前的epoll衔接上，可以看看:
[[对于msb课上epoll->netty的演变|https://www.notion.so/2-epoll-bd3f8388645b4f9bbfb28676d76502ed]]

! 多线程OIO的致命缺陷
[[Connection Per Thread模式的缺点|30.Java BIO]]
如何解决Connection Per Thread模式的缺点呢，一个有效的途径是：使用Reactor反应器模式，对线程的数量进行控制，做到一个线程处理大量的连接。

>（说到这儿，感觉reactor模式的基础就是[[多路复用器|20.五种IO模型]],因为''多路复用器就是实现了一个线程能监视多个连接数据的就绪情况''）
> reactor模式就是将IO事件的查询，IO事件的处理封装成了组件。

! 单线程Reactor模式
Reactor反应器模式有点儿类似[[事件驱动模式]]。

在事件驱动模式中，当有事件触发时，事件源会将事件dispatch分发到handler处理器，由处理器负责事件处理。而反应 器模式中的反应器角色，类似于事件驱动模式中的dispatcher事件分发器角色。
具体来说，在反应器模式中，有Reactor反应器和Handler处理器两个重要的组件:

(1)Reactor反应器:负责查询IO事件，当检测到一个IO事件，将其发送给相应的Handler处理器去处理。这里的IO事件，就是NIO中选择器查询出来的通道IO事件。

(2)Handler处理器:与IO事件(或者选择键)绑定，负责IO事件的处理。完成
真正的连接建立、通道的读取、处理业务逻辑、负责将结果写出到通道等。

看msb的SocketMultiplexingSingleThreadv2


! 多线程Reactor模式

是不是[[msb|https://www.notion.so/2-epoll-bd3f8388645b4f9bbfb28676d76502ed]]中的 netty 模型呢？？？
对比不同中间件的reactor模式：https://www.notion.so/1-d9a3ebd9a3a84630bca52405e6de9962

! reactor模式与观察者模式对比
相似之处在于:在反应器模式中，当查询到IO事件后，服务处理程序使用单路/多路分发(Dispatch)策略，同步地分发这些IO事件。观察者模式(Observer Pattern)也被称作发布/订阅模式，它定义了一种依赖关系，让多个观察者同时监听某一个主题(Topic)。这个主题对象在状态发生变化时，会通知所有观察者，它们能够执行相应的处理。

不同之处在于:在反应器模式中， Handler处理器实例和IO事件(选择键)的订阅关系，基本上是一个事件绑定到一个Handler处理器;''每一个IO事件(选择键)被查询后，反 应器会将事件分发给所绑定的Handler处理器，也就是一个事件只能被一个Handler处理;而在观察者模式中，同一个时刻，同一个主题可以被订阅过的多个观察者处理''。

! 反应器模式的优点和缺点
作为高性能的IO模式，反应器模式的优点如下:

⚫ 响应快，虽然同一反应器线程本身是同步的，但不会被单个连接的IO操作所阻塞;

⚫ 编程相对简单，最大程度避免了复杂的多线程同步，也避免了多线程的各个进程 之间切换的开销;

⚫ 可扩展，可以方便地通过增加反应器线程的个数来充分利用CPU资源。 

反应器模式的缺点如下:

⚫ 反应器模式增加了一定的复杂性，因而有一定的门槛，并且不易于调试。 

⚫ 反应器模式依赖于操作系统底层的IO多路复用系统调用的支持，如Linux中的epoll 系统调用。如果操作系统的底层不支持IO多路复用，反应器模式不会有那么高 效。 

⚫ 同一个Handler业务线程中，''如果出现一个长时间的数据读写，会影响这个反应器中其他通道的IO处理''。例如在大文件传输时，IO操作就会影响其他客户端 (Client)的响应时间。因而对于这种操作，还需要进一步对反应器模式进行改进。

