created: 20220611151903432
creator: TidGiUser
difficulty: 5
due: 20220614075159716
grade: -1
history: []
interval: 0
lapses: 0
modified: 20220613070210589
modifier: TidGiUser
reps: 1
retrievability: 1
review: 20220612075159716
stability: 2
tags: netty fx ?
title: 41.Json,protobuf案例
type: text/vnd.tiddlywiki

! 关键点：pipeline组装
json序列化：

发送端：pojo转json字符串 -> stringEncoder 字符串转字节 - LengthFieldPrepender(增加协议头（长度字段）)

接收端：[[LengthFieldBasedFrameDecoder|30.netty:Decoder]] 解析协议 - stringDecoder 字节转json字符串 - json字符串转pojo

protobuf：

发送端：ProtobufEncoder(pojo转字节) -> ProtobufVarint32LengthFieldPrepender（增加协议头（长度字段））

接收端 ProtobufVarint32FrameDecoder 解析协议 -> ProtobufDncoder

>如果IM项目中自定义protobuf协议头，是不是可以用LengthFieldBasedFrameDecoder（长度字段数据包解码器）来解析？？？''实验证明是可以的，这样就不用自定义解码器了''
>见Nettytest项目 protobuftester
>不过自定义decoder也有好处，更加灵活，''可以做校验，可以添加提示信息,日志信息，LengthFieldBasedFrameDecoder肯定是不能做头部校验的''

> 发送端：SimpleProtobufEncoder 自定义编码器增加头部
> 接收端：LengthFieldBasedFrameDecoder - ProtobufDecoder

----
>''还需要注意一点：bytebuf一般是堆外内存，而byte[]一般是堆内''

! Json案例
见项目 nettytest serilalizer包。

Java处理JSON数据有三个比较流行的开源类库有:阿里的FastJson、谷歌的Gson和开源社区的Jackson。

Jackson是一个简单的、基于Java的JSON开源库。使用Jackson开源库，可以轻松地将 Java POJO对象转换成JSON、XML格式字符串;同样也可以方便地将JSON、XML字符串 转换成Java POJO对象。

Jackson开源库的优点是:所依赖的Jar包较少、简单易用、性能也 还不错，另外Jackson社区相对比较活跃。

Jackson开源库的缺点是:对于复杂POJO类型、 复杂的集合Map、List的转换结果，不是标准的JSON格式，或者会出现一些问题。

Google的Gson开源库是一个功能齐全的JSON解析库，起源于Google公司内部需求而由 Google自行研发而来，在2008年5月公开发布第一版之后已被许多公司或用户应用。Gson 可以完成复杂类型的POJO和JSON字符串的相互转换，转换的能力非常强。

阿里巴巴的FastJson是一个高性能的JSON库。顾名思义，FastJson库采用独创的快速算法，将JSON转成POJO的速度提升到极致，从性能上说，其反序列化速度超过其他JSON开源库。

传闻说FastJson在复杂类型的POJO转换JSON(序列化)时，可能会出现一些引用类 型问题而导致JSON转换出错，需要进行引用的定制。

在实际开发中，目前主流的策略是:Google的Gson库和阿里的FastJson库两者结合使用。在POJO序列化成JSON字符串的应用场景(序列化场景)，使用Google的Gson库;在 JSON字符串反序列化成POJO的应用场景(反序列化场景)，使用阿里的FastJson库。

>但是Gson转换时会将Date类型直接转换为String，而FastJson转换为时间戳

! protobuf案例
使用步骤：

1. Protobuf使用proto文件来预先定义的消息格式。数据包是按照proto文件所定义的消格式完成二进制码流的编码和解码。proto文件简单地说，就是一个消息的协议文件，这个 协议文件的后缀文件名为“.proto”。

2. 通过Maven插件根据proto文件的消息格式,生成Protobuf POJO对象,每个对象都有自己的builder

3. 用builder生成对应的POJO对象


