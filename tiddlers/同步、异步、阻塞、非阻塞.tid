created: 20220601064510813
creator: TidGiUser
modified: 20220603161633226
modifier: TidGiUser
tags: 异步回调模式 IO $:/tags/Commander/Working fx
title: 同步、异步、阻塞、非阻塞
tmap.id: 92fe3518-42f9-4dba-863a-d08f9f27e957
type: text/vnd.tiddlywiki

''因为有[[缓冲区]],用户IO，也就是系统调用read和write，做的只是用户缓冲区和内核缓冲区之间的搬运，但是数据的流动还包括内核缓冲区和外设之间的流动。''

所以同步IO(read)指的就是用户进程主动发起IO，完成系统调用，直到内核完成数据的复制之后，系统调用返回，''复制过程''中用户进程一定阻塞

阻塞IO，指的是用户进程在内核数据还没准备好时也会阻塞。

非阻塞socket的read操作，用户进程在内核数据还没准备好时不会阻塞，会立即返回。

多路复用器。。。

---

解释一下阻塞与非阻塞。

阻塞IO，指的是需要内核IO操作彻底完成后，才返回
到用户空间执行用户程序的操作指令，''阻塞一词所指的是用户程序（发起IO请求的进程或者线程）的执行状态是阻塞的。可以说传统的IO模型都是阻塞IO模型，并且在Java中，默认创建的socket都属于阻塞IO模型。''

其次，解释一下同步与异步。

简单理解，同步与异步可以看成是发起IO请求的两种方
式。''

同步IO是指用户空间（进程或者线程）是主动发起IO请求的一方，系统内核是被动接
受方。

异步IO则反过来，系统内核主动发起IO请求的一方，用户空间是被动接受方。''

所谓同步阻塞IO，指的是用户空间（或者线程）主动发起，需要等待''内核IO操作''（外设-内核）彻底完成后，才返回到用户空间的IO操作，IO操作过程中，发起IO请求的用户进程（或者线程）处于阻塞状态。

非阻塞IO，指的是用户空间的程序不需要等待内核IO操作彻底完成，可以立即返回用 户空间去执行后续的指令，即发起IO请求的用户进程(或者线程)处于非阻塞的状态，与 此同时，内核会立即返回给用户一个IO的状态值。

阻塞和非阻塞的区别是什么呢?
阻塞是指用户进程(或者线程)一直在等待，而不能干别的事情;非阻塞是指用户进 程(或者线程)拿到内核返回的状态值就返回自己的空间，可以去干别的事情。在Java 中，非阻塞IO的socket套接字，要求被设置为NONBLOCK模式。

所谓同步非阻塞NIO，指的是用户进程主动发起，不需要等待内核IO操作彻底完成之 后，就能立即返回到用户空间的IO操作，IO操作过程中，发起IO请求的用户进程(或者线 程)处于非阻塞状态。

>NIO之所以叫同步非阻塞，是因为它是一个线程死循环去轮询IO状态，这个IO状态是面向缓冲区的，有多通道的概念。非阻塞指的是当某个通道没有数据时，该线程不会一直阻塞在那边，它还可以去搬运别的通道的数据。传统BIO是面向流的，不存在什么多通道概念，流没数据它自然会一直阻塞在那里。后来又有了AIO，所谓异步，很好理解的就是，程序线程不用一直站在现场了，数据准备好了系统会来通知他。

>说一点吧，对于非阻塞I/O的解释是不准确的，非阻塞I/O是指在调用read()系统调用时设置了O_NONBLOCK，此标志位意在告诉操作系统如果没有数据可读直接返回，用户程序不用一直阻塞等待。非阻塞I/O仅此而已，没有通知的功能。有数据通知用户线程那是epoll系统调用的机制，两者本质上不是一回事。
建议从linux系统调用上理解这类问题，这篇可能对你有帮助 https://www.cnblogs.com/upnote/p/12017212.html

>java中的IO，通过inputStream（读），outputstream（写），将磁盘，或者网络的数据源抽象为流，对流进行读写操作

相关参考：
[[怎样理解阻塞非阻塞与同步异步的区别？|https://www.zhihu.com/question/19732473/answer/241673170]]
