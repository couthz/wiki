created: 20220601144805530
creator: TidGiUser
difficulty: 5.1000000000000005
due: 20220616003449254
grade: 1
history: [{"due":"20220610080820100","interval":0,"difficulty":5,"stability":2,"retrievability":1,"grade":-1,"lapses":0,"reps":1,"review":"20220608080820100"}]
interval: 2
lapses: 0
modified: 20220610003449254
modifier: TidGiUser
reps: 2
retrievability: 0.9
review: 20220610003449253
stability: 5.512139752431654
tags: 计算机底层 fx IO 异步回调模式 ?
title: 用户态和内核态
type: text/vnd.tiddlywiki

! 总结一下用户态和内核态
好了我们现在需要再解释一下什么是内核态、用户态：当进程运行在内核空间时就处于内核态，而进程运行在用户空间时则处于用户态。

在用户态下，进程运行在用户地址空间中，被执行的代码要受到 CPU 的诸多检查，它们只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址，且只能对任务状态段(TSS)中 I/O 许可位图(I/O Permission Bitmap)中规定的可访问端口进行直接访问。

在内核态下，进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。

为什么要区分：对于以前的 DOS 操作系统来说，是没有内核空间、用户空间以及内核态、用户态这些概念的。可以认为所有的代码都是运行在内核态的，
因而：

1. 用户编写的应用程序代码可以很容易的让操作系统崩溃掉（操作系统的代码要比应用程序的代码健壮很多），而且权限大，病毒入侵很容易

2. 另外写程序很麻烦，用户要直接和硬件打交道，记端口，没有将硬件进行抽象

''总之，用户态进程 不能访问内核空间中的数据，也不能直接调用内核函数的。内核态进程可以执行任意命令，调用系统的一切资源''

! 内核态究竟是个什么东西
内核态是指一个特殊的进程，还是指进程的一种特殊状态？ - 知乎
https://www.zhihu.com/question/40147261

[img[截屏2022-06-02 16.45.27.png]]

简单的理解：用户进程进入内核态，当前用户进程处于挂起状态，但内核态既不是特殊进程（不是进程切换），也不是用户进程的一种特殊状态。

如果我们要挂起一个线程，我们把寄存器也保存到堆栈中，我们就具有它的所有状态，可以随时恢复它。这是线程。当我们切换线程的时候，同时切换它的地址空间（通过修改MMU即可），则我们认为发生了进程切换。所以进程的本质是地址空间，我们可以认为地址空间决定了进程是否发生切换

如果从上面那段话反推，其实正在运行的内核程序也并不属于当前线程，堆栈会切换为内核堆栈，地址空间是会变的，然而特权级的转换又不算是进程切换，或者说内核态并不属于任何的进程。

---

{{中断}}
---
! 用户进程中断后能不能非阻塞呢？？
应该是不能的，进入中断，中断返回之前，用户进程都是阻塞的
之所以NIO中read发生变化，也是改进了内核，内核程序在读不到网卡数据时会直接返回，有数据时也是内核负责将数据复制到用户空间。

NIO之所以叫同步非阻塞，是因为它是一个线程死循环去轮询IO状态，这个IO状态是面向[[缓冲区]]的（什么是[[面向流和面向缓冲区]]?），有多通道的概念。非阻塞指的是当某个通道没有数据时，该线程不会一直阻塞在那边，它还可以去搬运别的通道的数据（''但是，等待数据阶段完成，复制数据阶段用户进程还是会阻塞的，这就是所谓的“同步”''）。传统BIO是面向流的，不存在什么多通道概念，流没数据它自然会一直阻塞在那里。后来又有了AIO，所谓异步，很好理解的就是，程序线程不用一直站在现场了，数据准备好了系统会来通知他。
[[同步、异步、阻塞、非阻塞]]

---
! 等待IO时的java线程是runnable状态
https://blog.csdn.net/qq_38244610/article/details/106106276?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-106106276-blog-112972405.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-106106276-blog-112972405.pc_relevant_default&utm_relevant_index=1

https://app.yinxiang.com/shard/s1/nl/880660/0660fb40-8153-4d3c-8afa-efda865b1b01/

